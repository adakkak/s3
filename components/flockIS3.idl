/*
 * BEGIN FLOCK GPL
 * 
 * Copyright Flock Inc. 2005-2006
 * http://flock.com
 * 
 * This file may be used under the terms of of the
 * GNU General Public License Version 2 or later (the "GPL"),
 * http://www.gnu.org/licenses/gpl.html
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * 
 * END FLOCK GPL
 */

#include "nsISupports.idl"
#include "nsIRDFDataSource.idl"
#include "nsIRDFRemoteDataSource.idl"
#include "nsISimpleEnumerator.idl"
#include "nsIDictionary.idl"
#include "nsIDOMDocument.idl"
#include "flockIError.idl"
#include "nsIFile.idl"

[scriptable, uuid(2f67c190-fd79-11da-92e3-0800200c9a66)]
interface flockIS3Object: nsISupports
{
    attribute AString s3ID;
    attribute long uploadState;
    attribute boolean isEmpty;
    attribute AString fileName;
    attribute long size;
    attribute long type;
    
    const long IS_FILE = 0;
    const long IS_FOLDER = 1;
    
    const long NOT_UPLOADED = 2;
    const long UPLOADING = 3;
    const long UPLOADED = 4;
};


[scriptable, uuid(806d8293-4b31-4dd7-96c7-40aff29483bf)]
interface flockIS3ServiceListener: nsISupports
{
    void onError(in flockIError aError);
    void onLogin();
};

[scriptable, uuid(39041550-fd79-11da-92e3-0800200c9a66)]
interface flockIS3UploadListener: nsISupports
{
    void onUploadStart();
    void onUploadComplete();
};

[scriptable, uuid(4c79ece0-fd79-11da-92e3-0800200c9a66)]
interface flockIS3Service: nsIRDFDataSource
{
    void addListener(in flockIS3ServiceListener aListener);
    void removeListener(in flockIS3ServiceListener aListener);
    
    void add(in flockIS3Object aFlockS3Object); // adds an s3 object to the rdf
    void refresh(); // update the local rdf from service
    void upload(in flockIS3UploadListener aListener); // upload one file
    void remove(in AString url); //  remove file at given url on s3 then refresh
    
    void login(in flockIS3ServiceListener aListener);
    void logout();
    
    flockIS3Object create(in nsIFile aFile); // returns an s3 obj from a file
    
    attribute boolean isLoggedIn;

    attribute long state;
    const long LOGGED_OUT  = 0;
    const long LOGGING_IN  = 1;
    const long LOGGED_IN   = 2;
};

